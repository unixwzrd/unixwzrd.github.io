#!/usr/bin/env bash

# Because we are in utils/bin, we need to go up two to be in the BASE_DIR
BASE_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")/../..")"
my_name="$(basename "${BASH_SOURCE[0]}")"

cd "${BASE_DIR}" 

# Source project environment
source "${BASE_DIR}/.env/project.env"

pid_file="${BASE_DIR}/utils/etc/jekyll.pid"
watcher_pid_file="${BASE_DIR}/utils/etc/file_watcher.pid"

check_running() {
    if [ -f "$pid_file" ]; then
        pid=$(cat "$pid_file")
        if ps -p "$pid" > /dev/null 2>&1; then
            # Optionally, verify it's a Jekyll process
            if ps -p "$pid" -o comm= | grep -q 'jekyll'; then
                return 0
            fi
        fi
    fi
    return 1
}

check_watcher_running() {
    if [ -f "$watcher_pid_file" ]; then
        pid=$(cat "$watcher_pid_file")
        if ps -p "$pid" > /dev/null 2>&1; then
            # Verify it's a Python process running the file watcher
            if ps -p "$pid" -o comm= | grep -q 'python'; then
                return 0
            fi
        fi
    fi
    return 1
}

check_port_in_use() {
    # Check if port 4000 is in use by any process
    if lsof -i :4000 > /dev/null 2>&1; then
        return 0
    fi
    return 1
}

kill_process_on_port() {
    echo "Port 4000 is in use. Attempting to kill existing process..." >&2
    # Find and kill any process using port 4000
    pids=$(lsof -ti :4000 2>/dev/null)
    if [ -n "$pids" ]; then
        for pid in $pids; do
            echo "Killing process $pid on port 4000" >&2
            kill -TERM "$pid" 2>/dev/null
            sleep 2
            # Force kill if still running
            if ps -p "$pid" > /dev/null 2>&1; then
                echo "Force killing process $pid" >&2
                kill -KILL "$pid" 2>/dev/null
            fi
        done
        sleep 1
    fi
}

refresh_og_data() {
    echo "Refreshing OpenGraph data..." >&2
    fetch_og.py
}

site_build() {
    local skip_refresh=$1
    echo "Building $my_name" >&2
    if [[ ! "$PATH" =~ "$HOME/.rvm/bin:" ]]; then export PATH="$HOME/.rvm/bin:$PATH"; fi
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
    rvm use ext-ruby-3.3.4@unixwzrd.github.io --default
    
    # Only refresh OG data if not skipped
    if [ "$skip_refresh" != "true" ]; then
        refresh_og_data
    fi
    
    echo "Clearing Jekyll cache and site..." >&2
    rm -rf "${BASE_DIR}/html/.jekyll-cache/"
    rm -rf "${BASE_DIR}/_site/"
    rm -rf "${BASE_DIR}/html/_site/"
    rm -rf "${BASE_DIR}/html/.sass-cache/"
    
    echo "Building Jekyll site..." >&2
    cd "${BASE_DIR}" && bundle exec jekyll build --trace --verbose # Build the Jekyll site from base directory
}

startup_items() {
    local skip_refresh=$1
    echo "Starting $my_name" >&2
    
    # Check if port is in use and kill existing processes
    if check_port_in_use; then
        kill_process_on_port
    fi
    
    site_build "$skip_refresh"
    cd "${BASE_DIR}" && bundle exec jekyll serve --host 0.0.0.0 --port 4000 --trace & # Start Jekyll in background from base directory
    echo $! > "$pid_file" # Store Jekyll's PID
    
    # Start file watcher
    start_file_watcher
}

start_file_watcher() {
    echo "Starting file watcher..." >&2
    cd "${BASE_DIR}" && python utils/bin/file_watcher.py > /dev/null 2>&1 & # Start file watcher in background
    echo $! > "$watcher_pid_file" # Store file watcher's PID
    echo "File watcher started (PID: $(cat "$watcher_pid_file"))"
}

stop_file_watcher() {
    echo "Stopping file watcher..." >&2
    if check_watcher_running; then
        pid=$(cat "$watcher_pid_file")
        kill "$pid"
        if [ $? -eq 0 ]; then
            echo "File watcher (PID: $pid) stopped successfully."
        else
            echo "Failed to stop file watcher (PID: $pid)." >&2
        fi
        rm -f "$watcher_pid_file"
    else
        echo "File watcher is not running (no valid PID file found)."
    fi
}

start_service() {
    local skip_refresh=$1
    if check_running; then
        echo "Service is already running. Restarting..." >&2
        stop_service
    fi
    startup_items "$skip_refresh"
}

stop_service() {
    echo "Stopping $my_name" >&2
    if check_running; then
        pid=$(cat "$pid_file")
        kill "$pid"
        if [ $? -eq 0 ]; then
            echo "Jekyll server (PID: $pid) stopped successfully."
        else
            echo "Failed to stop Jekyll server (PID: $pid)." >&2
        fi
        rm -f "$pid_file"
    else
        echo "Service is not running (no valid PID file found)."
        # Try to kill any process on port 4000 anyway
        if check_port_in_use; then
            kill_process_on_port
        fi
    fi
    
    # Stop file watcher
    stop_file_watcher
}

# Parse arguments
skip_refresh=false
command=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        -n|--no-refresh)
            skip_refresh=true
            shift
            ;;
        build|start|stop|restart|refresh|watcher-start|watcher-stop|watcher-status|-h|--help)
            command="$1"
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $my_name [build|start|stop|restart|refresh|watcher-start|watcher-stop|watcher-status] [-n|--no-refresh]"
            exit 1
            ;;
    esac
done

# If no command was provided
if [ -z "$command" ]; then
    echo "Usage: $my_name [build|start|stop|restart|refresh|watcher-start|watcher-stop|watcher-status] [-n|--no-refresh]"
    exit 1
fi

case "$command" in
    -h|--help)
        echo "Usage: $my_name [build|start|stop|restart|refresh|watcher-start|watcher-stop|watcher-status] [-n|--no-refresh]"
        echo ""
        echo "Commands:"
        echo "  build           - Build the site"
        echo "  start           - Start the Jekyll server and file watcher"
        echo "  stop            - Stop the Jekyll server and file watcher"
        echo "  restart         - Restart the Jekyll server and file watcher"
        echo "  refresh         - Only refresh OpenGraph data"
        echo "  watcher-start   - Start only the file watcher"
        echo "  watcher-stop    - Stop only the file watcher"
        echo "  watcher-status  - Check file watcher status"
        echo ""
        echo "Options:"
        echo "  -n, --no-refresh  Skip refreshing OpenGraph data"
        ;;
    build)
        site_build "$skip_refresh"
        ;;
    start)
        start_service "$skip_refresh"
        ;;
    stop)
        stop_service
        ;;
    restart)
        echo "Restarting $my_name" >&2
        stop_service
        start_service "$skip_refresh"
        ;;
    refresh)
        refresh_og_data
        ;;
    watcher-start)
        start_file_watcher
        ;;
    watcher-stop)
        stop_file_watcher
        ;;
    watcher-status)
        if check_watcher_running; then
            echo "File watcher is running (PID: $(cat "$watcher_pid_file"))"
        else
            echo "File watcher is not running (no valid PID file found)."
        fi
        ;;
esac