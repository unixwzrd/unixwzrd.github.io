#!/usr/bin/env bash

# Jekyll-site: Standalone Jekyll build/serve/restart/stop script
# No file watcher logic included

BASE_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")/../..")"
cd "${BASE_DIR}"

# Source project environment
source "${BASE_DIR}/.env/project.env"

pid_file="${BASE_DIR}/utils/etc/jekyll.pid"

refresh_og_data() {
    echo "Refreshing OpenGraph data..." >&2
    fetch_og.py
}

check_running() {
    if [ -f "$pid_file" ]; then
        pid=$(cat "$pid_file")
        if ps -p "$pid" > /dev/null 2>&1; then
            if ps -p "$pid" -o comm= | grep -q 'jekyll'; then
                return 0
            fi
        fi
    fi
    return 1
}

check_port_in_use() {
    if lsof -i :4000 > /dev/null 2>&1; then
        return 0
    fi
    return 1
}

kill_process_on_port() {
    echo "Port 4000 is in use. Attempting to kill existing process..." >&2
    pids=$(lsof -ti :4000 2>/dev/null)
    if [ -n "$pids" ]; then
        for pid in $pids; do
            echo "Killing process $pid on port 4000" >&2
            kill -TERM "$pid" 2>/dev/null
            sleep 2
            if ps -p "$pid" > /dev/null 2>&1; then
                echo "Force killing process $pid" >&2
                kill -KILL "$pid" 2>/dev/null
            fi
        done
        sleep 1
    fi
}

site_build() {
    local skip_refresh=$1
    echo "Building Jekyll site..." >&2
    if [[ ! "$PATH" =~ "$HOME/.rvm/bin:" ]]; then export PATH="$HOME/.rvm/bin:$PATH"; fi
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
    rvm use ext-ruby-3.3.4@unixwzrd.github.io --default
    if [ "$skip_refresh" != "true" ]; then
        refresh_og_data
    fi
    rm -rf "${BASE_DIR}/html/.jekyll-cache/"
    rm -rf "${BASE_DIR}/_site/"
    rm -rf "${BASE_DIR}/html/_site/"
    rm -rf "${BASE_DIR}/html/.sass-cache/"
    cd "${BASE_DIR}" && bundle exec jekyll build --trace --verbose
}

start_service() {
    local skip_refresh=$1
    if check_running; then
        echo "Jekyll is already running. Restarting..." >&2
        stop_service
    fi
    if check_port_in_use; then
        kill_process_on_port
    fi
    site_build "$skip_refresh"
    
    # Jekyll serve flags - easily configurable
    local serve_flags="--host 0.0.0.0 --port 4000 --trace"
    # Note: Directory listings are disabled by default in Jekyll
    
    cd "${BASE_DIR}" && bundle exec jekyll serve $serve_flags &
    echo $! > "$pid_file"
    echo "Jekyll server started (PID: $(cat "$pid_file"))"
    echo "Serve flags: $serve_flags"
}

stop_service() {
    echo "Stopping Jekyll-site" >&2
    if check_running; then
        pid=$(cat "$pid_file")
        kill "$pid"
        if [ $? -eq 0 ]; then
            echo "Jekyll server (PID: $pid) stopped successfully."
        else
            echo "Failed to stop Jekyll server (PID: $pid)." >&2
        fi
        rm -f "$pid_file"
    else
        echo "Jekyll service is not running (no valid PID file found)."
        if check_port_in_use; then
            kill_process_on_port
        fi
    fi
}

show_help() {
    cat << EOF
Jekyll Site Management Script

Usage: jekyll-site [COMMAND] [OPTIONS]

COMMANDS:
    build     Build the Jekyll site
    start     Start the Jekyll server
    stop      Stop the Jekyll server
    restart   Restart the Jekyll server
    -h, --help Show this help message

OPTIONS:
    -n, --no-refresh  Skip OpenGraph data refresh (faster builds)
    -r, --refresh     Force OpenGraph data refresh (slower builds)
    
IMPORTANT: -n and -r are incompatible flags. If both are specified, -n takes 
precedence and the operation continues with a warning.

EXAMPLES:
    jekyll-site start              # Start with OG refresh (complete mode)
    jekyll-site start -n           # Start without OG refresh (fast mode)
    jekyll-site restart            # Restart without OG refresh (fast mode)
    jekyll-site restart -r         # Restart with OG refresh (complete mode)
    jekyll-site build -n           # Build without OG refresh
    jekyll-site stop               # Stop the server

DEFAULT BEHAVIOR:
    - start: Refresh OG data (complete mode)
    - restart: Skip OG data refresh (fast mode)
    - build: Refresh OG data (complete mode)
    - Conflicting flags: -n takes precedence, operation continues with warning
EOF
}

# Parse arguments
skip_refresh=false
force_refresh=false
command=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        -n|--no-refresh)
            skip_refresh=true
            shift
            ;;
        -r|--refresh)
            force_refresh=true
            shift
            ;;
        build|start|stop|restart|-h|--help)
            command="$1"
            shift
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Handle conflicting flags
if [ "$skip_refresh" = true ] && [ "$force_refresh" = true ]; then
    echo "Warning: Both -n/--no-refresh and -r/--refresh flags specified"
    echo "Continuing without refresh (no-refresh takes precedence)"
    echo "Continuing with $command operation..."
    skip_refresh=true
    force_refresh=false
fi

# Set default behavior based on command
if [ "$command" = "restart" ] && [ "$force_refresh" = false ] && [ "$skip_refresh" = false ]; then
    # Default restart behavior: skip refresh for speed
    skip_refresh=true
    echo "Restart: Using fast mode (no OG refresh). Use -r to force refresh."
elif [ "$command" = "start" ] && [ "$force_refresh" = false ] && [ "$skip_refresh" = false ]; then
    # Default start behavior: refresh for completeness
    skip_refresh=false
    echo "Start: Using complete mode (with OG refresh). Use -n for faster start."
fi

if [ -z "$command" ]; then
    show_help
    exit 1
fi

case "$command" in
    -h|--help)
        show_help
        ;;
    build)
        site_build "$skip_refresh"
        ;;
    start)
        start_service "$skip_refresh"
        ;;
    stop)
        stop_service
        ;;
    restart)
        echo "Restarting Jekyll-site" >&2
        stop_service
        start_service "$skip_refresh"
        ;;
    *)
        echo "Unknown command: $command"
        show_help
        exit 1
        ;;
esac 